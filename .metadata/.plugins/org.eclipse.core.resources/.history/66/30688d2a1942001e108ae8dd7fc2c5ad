import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class swea_1953 {
    static BufferedReader br;
    static StringTokenizer st;
    static int[][] map;
    static int[][] array;
    static int m;
    static int n;
    static boolean[][] visited;
    static int cnt;
    
    static int[][][] deltas ={
    		{ {-1,0},{0,-1},{1,0},{0,1}}, //1
            { {-1,0},{0,0},{1,0},{0,0}}, //상하
            { {0,0}, {0,-1}, {0,0},{0,1}},//좌우
            { {-1,0},{0,0},{0,0},{0,1}},//상,우
            {{0,0},{0,0},{1,0},{0,1}},//하,우
            {{0,0},{0,-1},{1,0},{0,0}}, //하,좌
            {{-1,0},{0,-1},{0,0},{0,0} },//상좌
    };

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());
        for(int tc = 1 ; tc <= t ; t++){
            String[] s = br.readLine().split(" ");
             n = Integer.parseInt(s[0]);
             m = Integer.parseInt(s[1]);
            map = new int[n][m];
            array= new int[n][m];
            int r = Integer.parseInt(s[2]);
            int c = Integer.parseInt(s[3]);
            int l = Integer.parseInt(s[4]);
            visited = new boolean[n][m];
            for(int i=0 ; i < n ; i++){
                st = new StringTokenizer(br.readLine());
                for(int j = 0 ; j < m ; j++){
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            bfs(r,c,l);
            for(int i=0 ; i < n ; i++) {
            	for(int j =0 ; j < m ; j++) {
            		if(array[i][j] >= l) cnt++;
            	}
            }
            System.out.println(cnt);
        }
    }

    public static void bfs(int r, int c, int hour){
        Queue<int[]> queue = new ArrayDeque<>();
        queue.add(new int[]{r,c});
        visited[r][c] = true;
        
        while(!queue.isEmpty()){
//        	if(h==hour) break;
            int[] poll = queue.poll(); //2,1
            
            int z = map[poll[0]][poll[1]]-1;
            System.out.println(z);
            for(int i=0 ; i < 4 ; i++) {
            	int y = poll[0] + deltas[z][i][0];
            	int x = poll[1] + deltas[z][i][1];
            	
            	if(y >= 0  && y < n && x >= 0 && x < m && map[y][x] != 0 && !visited[y][x]) {
            		System.out.println(y + " "+ x);
            		visited[y][x] = true;
            		queue.add(new int[] {y,x});
            		array[y][x] = array[poll[0]][poll[1]] +1;
            	}
            }
        }
    }
}
